/*
 * ALMA - Atacama Large Millimiter Array (c) European Southern Observatory, 2007
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

/** 
 * @author  acaproni   
 * @version $Id: OffsetButtonsPanel.java 199134 2013-12-19 00:07:05Z rmarson $
 * @since    
 */

package alma.control.gui.antennamount.offset;

import alma.control.gui.antennamount.mount.MountController;
import alma.control.gui.antennamount.utils.GUIConstants;
import alma.control.gui.antennamount.utils.ValueConverter;
import alma.control.gui.antennamount.utils.ValueConverter.ValueType;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Formatter;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * The panel showing the buttons, the textfield and the slidebar
 *
 */
public class OffsetButtonsPanel extends JPanel implements ActionListener {
	
	/**
	 * The type of offset to send (one per each button)
	 * @author acaproni
	 *
	 */
	private static enum OffsetDirection {
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	
	// gui elements
	private JButton upButton;
	private JButton downButton;
	private JButton rightButton;
	private JButton leftButton;
	
	/**
	 * The slider to select the amount of the offset
	 */
	private JSlider offsetSlider;
	
	/**
	 * The text field to write the offset into
	 */
	private JFormattedTextField offsetField;
	
	/**
	 * Units of measure
	 */
	private final String[] unitsStrs = new String[] {
			"arcsec",
			"arcmin",
			"degrees"
	};
	
	/**
	 * The combob box to select what field set in the offset
	 */
	private JComboBox unitsCB = new JComboBox(unitsStrs); 
	
	// Icons for buttons
	private final ImageIcon northIcon = new ImageIcon(this.getClass().getResource(GUIConstants.resourceFolder+"arrow_up.png"));
	private final ImageIcon southIcon = new ImageIcon(this.getClass().getResource(GUIConstants.resourceFolder+"arrow_down.png"));
	private final ImageIcon eastIcon = new ImageIcon(this.getClass().getResource(GUIConstants.resourceFolder+"arrow_right.png"));
	private final ImageIcon westIcon = new ImageIcon(this.getClass().getResource(GUIConstants.resourceFolder+"arrow_left.png"));
	
	// The type of coordinate in use
	private boolean equatorialInUse=false;
	
	// The controller
	private MountController controller=null;
	
	// gui extentions
	private int buttonWidth=84;
	private int buttonHeight=32;
	private Insets buttonMargin= new Insets(0,0,0,0);
	
	/**
	 * Constructor 
	 * 
	 * @param listener The listener for the buttons
	 */
	public OffsetButtonsPanel() {
		super();
		initialize();
	}
	
	/**
	 * Init the GUI
	 * 
	 * @param listener The listener for the events generated by the buttons
	 *
	 */
	private void initialize() {
		setLayout(new FlowLayout(FlowLayout.CENTER));
		JPanel p = new JPanel();
		
		p.setLayout(new GridBagLayout());
		
		GridBagConstraints g2= new GridBagConstraints(0,0,1,1,1,1,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(4,4,4,4),0,0);
		
		upButton= new JButton(northIcon);
		upButton.setMinimumSize(new Dimension(buttonWidth,buttonHeight));
		upButton.setPreferredSize(new Dimension(buttonWidth,buttonHeight));
		upButton.setMargin(buttonMargin);
		upButton.addActionListener(this);
		
		g2.gridx=1;
		p.add(upButton,g2);
		
		leftButton= new JButton(westIcon);
		leftButton.setMinimumSize(new Dimension(buttonWidth,buttonHeight));
		leftButton.setPreferredSize(new Dimension(buttonWidth,buttonHeight));
		leftButton.setMargin(buttonMargin);
		leftButton.addActionListener(this);
		
		g2.gridx=0;
		g2.gridy=1;
		g2.gridheight=3;
		p.add(leftButton,g2);
		
		g2.gridx=1;
		g2.gridy=1;
		g2.gridheight=1;
		g2.anchor= GridBagConstraints.NORTH;
		g2.insets=new Insets(1,4,4,4);
		p.add(unitsCB,g2);
		
		offsetField = new JFormattedTextField();
		offsetField.setMinimumSize(new Dimension(45,21));
		offsetField.setPreferredSize(new Dimension(45,21));
		offsetField.setText("0.0");
		g2.gridy=2;
		g2.anchor= GridBagConstraints.CENTER;
		p.add(offsetField,g2);
		
		offsetSlider= new JSlider();
		offsetSlider.setMaximum(600);
		offsetSlider.setMinimum(0);
		offsetSlider.setMinimumSize(new Dimension(45,21));
		offsetSlider.setPreferredSize(new Dimension(75,21));
		offsetSlider.addChangeListener(new ChangeListener() {
		
			public void stateChanged(ChangeEvent e) {
				Formatter f= new Formatter();
				if (unitsCB.getSelectedIndex()==0) {
					// arcsec
					f.format("%.1f",(offsetSlider.getValue()/10.0));
				} else {
					// arcmin
					f.format("%2d",(int)Math.round((offsetSlider.getValue()/10.0)));
				}
				String val= f.toString();
				
				if (!val.equals(offsetField.getText())) {
					offsetField.setText(val);
				}
			}
		
		});
		
		g2.gridy=3;
		g2.anchor= GridBagConstraints.SOUTH;
		g2.insets=new Insets(1,4,4,4);
		p.add(offsetSlider,g2);
		
		rightButton= new JButton(eastIcon);
		rightButton.setMinimumSize(new Dimension(buttonWidth,buttonHeight));
		rightButton.setPreferredSize(new Dimension(buttonWidth,buttonHeight));
		rightButton.setMargin(buttonMargin);
		rightButton.addActionListener(this);
		
		g2.gridx=2;
		g2.gridy=1;
		g2.gridheight=3;
		g2.anchor= GridBagConstraints.CENTER;
		g2.insets=new Insets(4,4,4,4);
		p.add(rightButton,g2);
		
		downButton = new JButton(southIcon);
		downButton.setMinimumSize(new Dimension(buttonWidth,buttonHeight));
		downButton.setPreferredSize(new Dimension(buttonWidth,buttonHeight));
		downButton.setMargin(buttonMargin);
		downButton.addActionListener(this);
		
		g2.gridx=1;
		g2.gridy=4;
		g2.gridheight=1;
		p.add(downButton,g2);
		
		add(p);
		
		// Connect the listeners
		unitsCB.addActionListener(this);
	}
	
	/**
	 * Set the coordinates to be Equatorial or Horizontal
	 * 
	 * @param coordinatesEquatorial The coordinatesEquatorial to set.
	 */
	public void setCoordinatesEquatorial(final boolean coordinatesEquatorial) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				equatorialInUse=coordinatesEquatorial;
				if (coordinatesEquatorial) {
					upButton.setText("Dec+");
					downButton.setText("Dec-");
					rightButton.setText("RA+");
					leftButton.setText("RA-");
				} else {
					upButton.setText("Ve+");
					downButton.setText("Ve-");
					rightButton.setText("Hr+");
					leftButton.setText("Hr-");
				}
			}
		});
	}
	
	/**
	 * Enable disable widgets
	 * 
	 * @param enable If <code>true</code> the buttons are enabled
	 */
	public void enableWidgets(final boolean enabled) {
		super.setEnabled(enabled);
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				upButton.setEnabled(enabled);
				downButton.setEnabled(enabled);
				leftButton.setEnabled(enabled);
				rightButton.setEnabled(enabled);
				offsetSlider.setEnabled(enabled);
				offsetField.setEnabled(enabled);
				unitsCB.setEnabled(enabled);		
			}
		});
	}
	
	/**
	 * @see {@link ActionListener}
	 */
	public void actionPerformed(ActionEvent e) {
		if (e.getSource()==downButton) {
			if (equatorialInUse) {
				setRADecOffset(OffsetDirection.DOWN);
			} else {
				setAzElOffset(OffsetDirection.DOWN);
			}
		} else if (e.getSource()==upButton) {
			if (equatorialInUse) {
				setRADecOffset(OffsetDirection.UP);
			} else {
				setAzElOffset(OffsetDirection.UP);
			}
		} else if (e.getSource()==leftButton) {
			if (equatorialInUse) {
				setRADecOffset(OffsetDirection.LEFT);
			} else {
				setAzElOffset(OffsetDirection.LEFT);
			}
		} else if (e.getSource()==rightButton) {
			if (equatorialInUse) {
				setRADecOffset(OffsetDirection.RIGHT);
			} else {
				setAzElOffset(OffsetDirection.RIGHT);
			}
		} else if (e.getSource()==unitsCB) {
			offsetSlider.setValue(offsetSlider.getMinimum());
		} else {
			System.err.println("Unknown source of events: "+e);
		}
			
	}
	
	/**
	 * Send an offset in Az/El
	 * 
	 * @param type The type of button pressed
	 *
	 */
	private void setAzElOffset(OffsetDirection direction) {
		if (controller==null) {
			return;
		}
		String offsetStr= calcOffsetString(direction);
		double offset=ValueConverter.string2rad(offsetStr, ValueType.DMS);
		switch (direction) {
		case UP: {
			controller.incrementHorOffsetLat(offset);
			break;
		}
		case DOWN: {
			controller.incrementHorOffsetLat(-offset);
			break;
		}
		case LEFT: {
			controller.incrementHorOffsetLong(-offset);
			break;
		}
		case RIGHT: {
			controller.incrementHorOffsetLong(offset);
			break;
		}
		default: {
			throw new IllegalArgumentException("Unknown type "+direction);
		}
		}
	}
	
	/**
	 * Generate the offset string in the format aa:bb:cc.dd (or similar)
	 * <P>
	 * This string does not contain the sign that will be added later
	 * depending on the direction of the offset.
	 * 
	 * @param direction The direction of the offset to apply (i.e.
	 * 					LEFT, RIGHT, UP, DOWN)
	 * @return The string representing the offset
	 */
	private String calcOffsetString(OffsetDirection direction) {
		String ret;
		if (equatorialInUse) {
			String offset=offsetField.getText().trim();
			//	RA/Dec
			if (unitsCB.getSelectedIndex()==0) {
				// arcsec
				if (direction==OffsetDirection.LEFT || direction==OffsetDirection.RIGHT){
					float secs=Float.parseFloat(offset);
					// sec
					if (secs<0) {
						ret=String.format("00:00:00%.2f", secs);
					} else if (secs<10) {
						ret=String.format("00:00:0%.2f", secs);
					} else {
						ret=String.format("00:00:%.2f", secs);
					}
				} else {
					float secs=Float.parseFloat(offset);
					// sec
					if (secs<0) {
						ret=String.format("000"+((char)0xb0)+"00'00%.2f", secs);
					} else if (secs<10) {
						ret=String.format("000"+((char)0xb0)+"00'0%.2f", secs);
					} else {
						ret=String.format("000"+((char)0xb0)+"00'%.2f", secs);
					}
				}
			} else if (unitsCB.getSelectedIndex()==1) {
				// arcmin
				if (direction==OffsetDirection.LEFT || direction==OffsetDirection.RIGHT){
					ret=String.format("00:%02d:00.00",Integer.parseInt(offset));
				} else {
					ret=String.format("000"+((char)0xb0)+"%02d'00.00",Integer.parseInt(offset));
				}
			} else {
				// degrees
				if (direction==OffsetDirection.LEFT || direction==OffsetDirection.RIGHT){
					ret=String.format("%02d:00:00.00",Integer.parseInt(offset));
				} else {
					ret=String.format("%03d"+((char)0xb0)+"00'00.00",Integer.parseInt(offset));
				}
			}
		} else {
			String offset=offsetField.getText().trim();
			// Az/El
			if (unitsCB.getSelectedIndex()==0) {
				float secs=Float.parseFloat(offset);
				// sec
				if (secs<0) {
					ret=String.format("000"+((char)0xb0)+"00'00%.2f", secs);
				} else if (secs<10) {
					ret=String.format("000"+((char)0xb0)+"00'0%.2f", secs);
				} else {
					ret=String.format("000"+((char)0xb0)+"00'%.2f", secs);
				}
			} else if (unitsCB.getSelectedIndex()==1) {
				// min
				ret=String.format("000"+((char)0xb0)+"%02d'00.00",Integer.parseInt(offset));
			} else {
				// degrees
				ret=String.format("%03d"+((char)0xb0)+"00'00.00",Integer.parseInt(offset));
			}
		}
		return ret;
	}
	
	/**
	 * Send an offset in equatorial
	 *
	 * @param type The type of button pressed
	 */
	private void setRADecOffset(OffsetDirection direction) {
		if (controller==null) {
			return;
		}
		
		Double offset;
		Double negOffset;
		String offsetStr=calcOffsetString(direction);
		String negativeOffsetStr="-"+offsetStr;
		ValueType type;
		if (direction==OffsetDirection.RIGHT|| direction==OffsetDirection.LEFT) {
			type=ValueType.HMS;
		} else {
			type=ValueType.DMS;
		}
		offset=ValueConverter.string2rad(offsetStr, type);
		negOffset=ValueConverter.string2rad(negativeOffsetStr, type);
		switch (direction) {
		case UP: {
			controller.incrementEqOffsetLat(offset);
			break;
		}
		case DOWN: {
			controller.incrementEqOffsetLat(negOffset);
			break;
		}
		case LEFT: {
			controller.incrementEqOffsetLong(negOffset);
			break;
		}
		case RIGHT: {
			controller.incrementEqOffsetLong(offset);
			break;
		}
		default: {
			throw new IllegalArgumentException("Unknown type "+direction);
		}
		}
	}
	
	/**
	 * Set the controller
	 * 
	 * @param ctrl The MountController (can be null)
	 */
	public void setController(MountController ctrl) {
		controller=ctrl;
		enableWidgets(ctrl!=null);
	}
	
	
}
