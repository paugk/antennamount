/*
 * ALMA - Atacama Large Millimiter Array (c) European Southern Observatory, 2007
 * 
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

/** 
 * @author  caproni   
 * @version $Id$
 * @since    
 */

package alma.control.gui.antennamount.axis;

import java.awt.FlowLayout;

import alma.control.gui.antennamount.mount.AxisStatusDefinition;

import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;

/**
 * An helper class to manage the buttons for the axis.
 * The appearance of the buttons change depending on the state of the axis.
 * 
 * The events generated by the buttons are not processed here
 * 
 * It works for detailed (both axis) and standard panel (single axe)
 *
 */
public class AxisButtonPanel extends JPanel {
	
	// The three button
	private JToggleButton shutdownB=null;
	private JToggleButton standbyB=null;
	private JToggleButton trackingB=null;
	// Helper array with a reference to the three buttons
	private JToggleButton[] buttonsArray = new JToggleButton[3];
	
	// We need to know if someone from outside requested to enable disable
	// the buttons calling enableWidgets
	// If it happened, the refresh method will not enable the buttons
	private boolean widgetsDisabled=false;
	
	public AxisButtonPanel(JToggleButton shutdown, JToggleButton standby, JToggleButton tracking) {
		super();
		if (shutdown==null) {
			throw new IllegalArgumentException("Invalid null shutdown button");
		}
		if (standby==null) {
			throw new IllegalArgumentException("Invalid null standby button");
		}
		if (tracking==null) {
			throw new IllegalArgumentException("Invalid null tracking button");
		}
		shutdownB=shutdown;
		standbyB=standby;
		trackingB=tracking;
		buttonsArray[0]=shutdownB;
		buttonsArray[1]=standbyB;
		buttonsArray[2]=trackingB;
		initialize();
	}
	
	/**
	 * Initialize the GUI
	 *
	 */
	private void initialize() {
		setBorder(new TitledBorder("Set mode"));
		setLayout(new FlowLayout(FlowLayout.LEFT));
		add(shutdownB);
		add(standbyB);
		add(trackingB);
	}
	
	/**
	 * Enable/disable buttons depending on the state of the axis.
	 * <P>
	 * The selected button is the button corresponding to the passed
	 * state.
	 * Tracking is disabled if the state is SHUTDOWN
	 * 
	 * @param state The state of the axis (or one single axe)
	 */
	public void refreshButtonState(AxisStatusDefinition state) {
		switch (state) {
		case SHUTDOWN: {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					selectOnly(shutdownB);
					
					if (!widgetsDisabled) {
						standbyB.setEnabled(true);
						shutdownB.setEnabled(false);
						trackingB.setEnabled(false);
					}		
				}
			});
			break;
		}
		case STANDBY: {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					selectOnly(standbyB);
					
					if (!widgetsDisabled) {
						shutdownB.setEnabled(true);
						standbyB.setEnabled(false);
						trackingB.setEnabled(true);
					}		
				}
			});
			break;
		}
		case AUTONOMOUS: {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					selectOnly(trackingB);
					
					if (!widgetsDisabled) {
						shutdownB.setEnabled(true);
						standbyB.setEnabled(true);
						trackingB.setEnabled(false);
					}		
				}
			});
			
			break;
		}
		case UNKNOWN:
		case ERROR:
		default: {
			SwingUtilities.invokeLater(new Runnable() {
				public void run() {
					standbyB.setSelected(false);
					shutdownB.setSelected(false);
					trackingB.setSelected(false);
					
					if (!widgetsDisabled) {
						shutdownB.setEnabled(true);
						standbyB.setEnabled(true);
						trackingB.setEnabled(true);
					}		
				}
			});
			
			break;
		}
		}
	}
	
	/**
	 * Enable/disable the widgets
	 * 
	 * @param enable if true enable the widgets
	 */
	public void enableWidgets(final boolean enable) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				widgetsDisabled=!enable;
				trackingB.setEnabled(enable);
				standbyB.setEnabled(enable);
				shutdownB.setEnabled(enable);
			}
		});
	}
	
	/**
	 * Select only the passed button, de-selecting the others.
	 * 
	 * <b>Note</b>: this method must be executed inside the Swing thread.
	 * 
	 * @param btn The button to select
	 */
	private void selectOnly(JToggleButton btn) {
		// The selection/deselection is done only if the 
		// actual selection state is different from the requested
		for (int t=0; t<buttonsArray.length; t++) {
			if (buttonsArray[t]==btn) {
				if (!buttonsArray[t].isSelected()) {
					buttonsArray[t].setSelected(true);
				}
			} else {
				if (buttonsArray[t].isSelected()) {
					buttonsArray[t].setSelected(false);
				}
			}
		}
	}
}
